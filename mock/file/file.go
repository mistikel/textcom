// Code generated by MockGen. DO NOT EDIT.
// Source: file/file.go

// Package mock_file is a generated GoMock package.
package mock_file

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFile is a mock of IFile interface.
type MockIFile struct {
	ctrl     *gomock.Controller
	recorder *MockIFileMockRecorder
}

// MockIFileMockRecorder is the mock recorder for MockIFile.
type MockIFileMockRecorder struct {
	mock *MockIFile
}

// NewMockIFile creates a new mock instance.
func NewMockIFile(ctrl *gomock.Controller) *MockIFile {
	mock := &MockIFile{ctrl: ctrl}
	mock.recorder = &MockIFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFile) EXPECT() *MockIFileMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIFile) Add(text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", text)
}

// Add indicates an expected call of Add.
func (mr *MockIFileMockRecorder) Add(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIFile)(nil).Add), text)
}

// Write mocks base method.
func (m *MockIFile) Write() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIFileMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIFile)(nil).Write))
}
